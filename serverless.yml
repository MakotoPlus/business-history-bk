service: business-history-bk
#
# ApiGateway & Lambda版 (2021.03.31)
#
#
# serverless deploy  --stage dev
# serverless deploy  --stage prod
# serverless deploy  --stage poc
#
# app and org for use with dashboard.serverless.com
#app: business-history
#org: business-history
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-dynamodb-local
#------------------------------------------------------------
# こいつを有効にすると 関数のみのDeployが失敗するので注意
#  - serverless-python-requirements
#------------------------------------------------------------

custom:
  cognito-name: business-history
  s3bucketname: ${self:provider.stage}-s3-business-history-bk
  ACCESS_CONTROL_ALLOW_ORIGIN: ${file(./conf/${self:provider.stage}.yml):ACCESS_CONTROL_ALLOW_ORIGIN}
  AUTHORIZER_NAME: ${self:provider.stage}-business-history-bk
  ROLE_ARN: ${file(./conf/${self:provider.stage}.yml):ROLE_ARN}
  LAYERS_01: ${file(./conf/${self:provider.stage}.yml):LAYERS_01}
  DYNAMODB_ENDPOINT: ${file(./conf/${self:provider.stage}.yml):DYNAMODB_ENDPOINT}
  TABLE:
    M_USER: ${self:provider.stage}_${file(./conf/${self:provider.stage}.yml):TABLE.M_USER}
    M_COMPANY: ${self:provider.stage}_${file(./conf/${self:provider.stage}.yml):TABLE.M_COMPANY}
    T_WORK_HISTORY: ${self:provider.stage}_${file(./conf/${self:provider.stage}.yml):TABLE.T_WORK_HISTORY}
  stage: ${opt:stage, 'dev'}

provider:
  name: aws
  runtime: python3.8
  stage: ${self:custom.stage}
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  #
  iam:
    role:
       ${self:custom.ROLE_ARN}

  #--------------------------------------------------------------
  # 環境変数設定
  #--------------------------------------------------------------
  environment:
    COGNITO_USERPOOL: business-history-cognito
    LAYER_COMMON: common-layer
    # 時刻設定 UTC -> Tokyo
    TZ: "Asia/Tyokyo"
    S3_BUCKET: ${self:custom.s3bucketname}
    ACCESS_CONTROL_ALLOW_ORIGIN: ${self:custom.ACCESS_CONTROL_ALLOW_ORIGIN}
    TABLE_M_USER: ${self:custom.TABLE.M_USER}
    TABLE_M_COMPANY : ${self:custom.TABLE.M_COMPANY}
    TABLE_T_WORK_HISTORY: ${self:custom.TABLE.T_WORK_HISTORY}

    DYNAMODB_TABLE: items
    DYNAMODB_ENDPOINT: ${self:custom.DYNAMODB_ENDPOINT}


  #--------------------------------------------------------------
  # APIGateway
  #--------------------------------------------------------------
  apiGateway:
    #restApiId: xxxxxxxxxx # REST API resource ID. Default is generated by the framework
    #restApiRootResourceId: xxxxxxxxxx # Root resource, represent as / path
    #websocketApiId: xxxxxxxxxx # Websocket API resource ID. Default is generated by the framework
    #description: Some Description # optional - description of deployment history
    apiKeys:             # APIキーを生成
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:ListBucket
        - s3:PutObject
        - s3:ListBucket
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - cognito-idp:ListUsers
        - cognito-idp:AdminListGroupsForUser
      Resource:
          - "arn:aws:cognito-idp:ap-northeast-1:*:*"
          - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.stage}*"

# you can add packaging information here
package:
  #これにより、functionごとにパッケージが作成されるようになるらしい
  individually: true
#  include:
#    - lib/**
#    - venv/Lib/**
#     - report01.py
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - venv/**
    - node_modules/**
    - .vscode/**
    - .dynamodb/**
    - .git/**
    - .serverless/**
    - __pycache__/**
    - migrations/**
    - report/**
    - tmp/**
    - layer/**
    - cognito/**
    - tmp/**
    - conf/**
    - businesshistory/**
    - resource-serverless/**
    - userinfo/**
    - handler.py
    - piprequest.txt
    - README.md
    - requirements.txt
    - package-lock.json
    - workspace.code-workspace
    - migrations/**
    - package.json
    - pyrightconfig.json
    - requirements.txt
    - serverless - コピー.yml
    - testdata001.json

#    - exclude-me.py
#    - exclude-me-dir/**


#--------------------------------------------------------------
# Function 別ファイル化
#--------------------------------------------------------------
functions:
  - ${file(./resource-serverless/function.yml)}

resources:
  # cognitoは別サービス化
  #- ${file(./resource-serverless/cognito-user-pool.yml)}
  - Resources:
#      # 別サービス化
#      Bucket:
#        Type: AWS::S3::Bucket
#        Properties:
#          BucketName: ${self:provider.environment.S3_BUCKET}

      #--------------------------------------------------------------
      # Apigatewayオーサライザー設定
      #--------------------------------------------------------------
      ApiGatewayAuthorizer:
          Type: AWS::ApiGateway::Authorizer
          Properties:
            AuthorizerResultTtlInSeconds: 30
            IdentitySource: method.request.header.Authorization
            Name: ${self:custom.AUTHORIZER_NAME}
            RestApiId: 
              Ref: ApiGatewayRestApi
            Type: COGNITO_USER_POOLS
            ProviderARNs:
              - "${cf:${self:provider.environment.COGNITO_USERPOOL}-${self:provider.stage}.UserPoolIdArn}"

  # 別サービス化
  # DynamoDBの構築
  #- ${file(./resource-serverless/dynamotable.yml)}

Outputs:
#    #CommonLayerExport:
#    # RestApi resource ID (e.g. ei829oe)
#    RestApiId:
#      Value:
#        Ref: ApiGatewayRestApi
#      Export:
#Name: postsapi-${self:provider.stage}-RestApiId
#    #Path Resources
#    ApiGatewayResourceUsers:
#      Value:
#        Ref: ApiGatewayResourceUsers
#      Export:
#        Name: postsapi-${self:provider.stage}-ApiGatewayResourceUsers
#    #ApiGatewayAuthorizerId:
#    #  Value:
#    #    Ref: SharedApiGatewayAuthorizer
#    #  Export:
#    #    Name: apiGateway-authorizerId-${opt:stage, self:provider.stage}
#    apiAuthorizerId:
#      Value: !Ref SharedApiGatewayAuthorizer
#
#    ApiGatewayAuthorizerId:
#      Value:
#        Ref: ApiGatewayAuthorizer
#      Export:
#        Name: postsapi-${self:provider.stage}-ApiGatewayAuthorizerId

