  #---------------------------------------
  # Cognito認証後イベントHandlerの設定
  #
  # イベント種類：
  #  CreateAuthChallenge:認証チャレンジを作成します。
  #  CustomMessage:カスタム Message AWS Lambda トリガー。
  #  DefineAuthChallenge:認証チャレンジを定義します。
  #  PostAuthentication:認証後 AWS Lambda トリガー。
  #  PostConfirmation:確認後 AWS Lambda トリガー。
  #  PreAuthentication:事前認証 AWS Lambda トリガー。
  #  PreSignUp:事前登録 AWS Lambda トリガー。
  #  PreTokenGeneration:トークンの生成前に呼び出される Lambda トリガー。
  #  UserMigration:ユーザー移行 Lambda 設定タイプ。
  #  VerifyAuthChallengeResponse:認証チャレンジレスポンスを確認します。
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-lambdaconfig.html
  #---------------------------------------

  # あとでコメントはずす 2021/05/29
  postConfirmation:
    handler: cognito/cognito_triger_PostConfirmation.run
    package:
      include:
        - cognito/cognito_triger_PostConfirmation.py
    events:
      - cognitoUserPool:
          pool: ${self:provider.stage}-${self:custom.cognito-name}
          trigger: PostConfirmation
          existing: true
    layers:
      - ${self:custom.LAYERS_01}
      - ${cf:${self:provider.environment.LAYER_COMMON}-${opt:stage, self:provider.stage}.CommonLayerExport}
  #
  # 一度全コンパイル時にここがエラーとなったが、一度コメントアウトして再度外したら正常終了した。
  # その時のエラー内容は 「- Modifying service token is not allowed..」だった。
  postAuthentication:
    handler: cognito/cognito_triger_postAuthentication.run
    package:
      include:
        - cognito/cognito_triger_postAuthentication.py
    events:
      - cognitoUserPool:
          pool: ${self:provider.stage}-${self:custom.cognito-name}
          trigger: PostAuthentication
          existing: true
    layers:
      - ${self:custom.LAYERS_01}
      - ${cf:${self:provider.environment.LAYER_COMMON}-${opt:stage, self:provider.stage}.CommonLayerExport}
  handlerget:
    handler: handler.run
    package:
      include:
        - handler.py
    events:
     - http:           # API Gatewayの設定
        path: run
        method: get
##        private: true  # APIキーを使用する
        cors: true     # API GatewayにCORSの設定をする
  outputpdf:
    handler: businesshistory/outputpdf.run
    package:
      include:
        - businesshistory/outputpdf.py
        - businesshistory/report01.py
    events:
     - http:           # API Gatewayの設定
        path: outputpdf
        method: post
        #private: true  # APIキーを使用する
        cors: true     # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    layers:
      - ${self:custom.LAYERS_01}
      - ${cf:${self:provider.environment.LAYER_COMMON}-${opt:stage, self:provider.stage}.CommonLayerExport}
  userinfo-put:
    handler: userinfo/userinfo-update.run
    package:
      include:
        - userinfo/userinfo-update.py
    events:
     - http:           # API Gatewayの設定
        path: userinfo/{uuid}
        method: put
        #private: true  # APIキーを使用する
        cors: true     # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    layers:
      - ${self:custom.LAYERS_01}
      - ${cf:${self:provider.environment.LAYER_COMMON}-${opt:stage, self:provider.stage}.CommonLayerExport}
  userinfo-get:
    handler: userinfo/userinfo.run
    package:
      include:
        - userinfo/userinfo.py
    events:
     - http: # API Gatewayの設定
        path: userinfo/{uuid}
        method: get
        #private: true  # APIキーを使用する
        cors: true      # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    layers:
      - ${self:custom.LAYERS_01}
      - ${cf:${self:provider.environment.LAYER_COMMON}-${opt:stage, self:provider.stage}.CommonLayerExport}
  # 企業情報登録/取得
  company:
    handler: company/company.run
    package:
      include:
        - company/company.py
    events:
     - http: # API Gatewayの設定
        path: company/{companycd}/{uuid}
        method: get
        #private: true  # APIキーを使用する
        cors: true      # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
     - http: # API Gatewayの設定
        path: company/{companycd}/{uuid}
        method: put
        #private: true  # APIキーを使用する
        cors: true      # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    layers:
      - ${self:custom.LAYERS_01}
      - ${cf:${self:provider.environment.LAYER_COMMON}-${opt:stage, self:provider.stage}.CommonLayerExport}

  # 業務経歴登録/更新/削除
  history:
    handler: businesshistory/history.run
    package:
      include:
        - businesshistory/history.py
    events:
     - http: # API Gatewayの設定
        path: history/{uuid}
        method: post
        #private: true  # APIキーを使用する
        cors: true      # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
     - http: # API Gatewayの設定
        path: history/{uuid}/{rangekey}
        method: delete
        #private: true  # APIキーを使用する
        cors: true      # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
     - http: # API Gatewayの設定
        path: history/{uuid}/{rangekey}
        method: put
        #private: true  # APIキーを使用する
        cors: true      # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    layers:
      - ${self:custom.LAYERS_01}
      - ${cf:${self:provider.environment.LAYER_COMMON}-${opt:stage, self:provider.stage}.CommonLayerExport}

  history-list:
    handler: businesshistory/historylist.get
    package:
      include:
        - businesshistory/historylist.py
    events:
     - http: # API Gatewayの設定
        path: historylist/{uuid}/{index}
        method: get
        #private: true  # APIキーを使用する
        cors: true      # API GatewayにCORSの設定をする
        authorizer:     # Lambdaオーソライザーの設定
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    layers:
      - ${self:custom.LAYERS_01}
      - ${cf:${self:provider.environment.LAYER_COMMON}-${opt:stage, self:provider.stage}.CommonLayerExport}
